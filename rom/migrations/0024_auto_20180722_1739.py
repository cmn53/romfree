# Generated by Django 2.0.7 on 2018-07-22 17:39

from django.db import migrations
from django.contrib.gis.db import models
from django.db.models import Max
from math import log10

def load_qtr_static_scores(apps, schema_editor):
    Score = apps.get_model('rom', 'Score')
    max = Score.objects.aggregate(Max('qtr_trips'), Max('qtr_freq_trips'), Max('qtr_dest_trips'))

    all_scores = Score.objects.all()
    for score in all_scores:
        try:
            if score.qtr_trips == 0:
                continue
            else:
                trips = log10(score.qtr_trips)
                freq_trips = log10(score.qtr_freq_trips) if score.qtr_freq_trips else 0
                dest_trips = log10(score.qtr_dest_trips) if score.qtr_dest_trips else 0
                static_score = trips * 30/log10(max['qtr_trips__max']) + freq_trips * 30/log10(max['qtr_freq_trips__max']) + dest_trips * 30/log10(max['qtr_dest_trips__max'])
                score.qtr_static_score = static_score
                score.save()
        except Exception as e:
            print("%s" %e)
            pass

def load_half_static_scores(apps, schema_editor):
    Score = apps.get_model('rom', 'Score')
    max = Score.objects.aggregate(Max('half_trips'), Max('half_freq_trips'), Max('half_dest_trips'))

    all_scores = Score.objects.all()
    for score in all_scores:
        try:
            if score.half_trips == 0:
                continue
            else:
                trips = log10(score.half_trips)
                freq_trips = log10(score.half_freq_trips) if score.half_freq_trips else 0
                dest_trips = log10(score.half_dest_trips) if score.half_dest_trips else 0
                static_score = trips * 30/log10(max['half_trips__max']) + freq_trips * 30/log10(max['half_freq_trips__max']) + dest_trips * 30/log10(max['half_dest_trips__max'])
                score.half_static_score = static_score
                score.save()
        except Exception as e:
            print("%s" %e)
            pass

class Migration(migrations.Migration):

    dependencies = [
        ('rom', '0023_auto_20180722_1738'),
    ]

    operations = [
        migrations.RunPython(load_qtr_static_scores),
        migrations.RunPython(load_half_static_scores)
    ]
